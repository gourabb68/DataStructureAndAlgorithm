//implement a graph using GraphAdjacencyList
class Graph{
    constructor(){
        this.adjacencyList =[];
    }

    //add vertex
    addVertex(key){
        if(!this.adjacencyList[key]) this.adjacencyList[key] =[];
    }

    //add edges
    addEdge(v1,v2){
        this.adjacencyList[v1].push(v2);
        this.adjacencyList[v2].push(v1);
    }

    //remove Edge
    removeEdge(v1,v2){
        this.adjacencyList[v1] = this.adjacencyList[v1].filter(v=>v!==v2)
        this.adjacencyList[v2] = this.adjacencyList[v2].filter(v=>v!==v1)
    }

    //remove Vertex
    removeVertex(vertex){
        while(this.adjacencyList[vertex].length){
            const adjacentVertex = this.adjacencyList[vertex].pop();
            this.removeEdge(vertex, adjacentVertex);
        }
        delete this.adjacencyList[vertex];
    }

    //DFS Traversal Recursive way
     depthFirstSearchRecursive(vertex){
         let result = [];
         let visited = {};
          let self = this;
        //IIFE helper function for recursive call
         (function dfs(vertex){    
         if(!vertex) return null ; //no child found i.e. dead end                          
            visited[vertex] = true;
            result.push(vertex);
            self.adjacencyList[vertex].forEach( neighbor =>{
                //check already visited or nor
                if(!visited[neighbor]){
                    return dfs(neighbor);
                }
            } )

         })(vertex);
           
         return result;
     }

     //DFS Traversal Iterative Way
     depthFirstSearchIterative(vertex){
         let stack =[vertex];
          let result = [];
          let visited = {};
          let currentVertex;
          visited[vertex] = true;
          while(stack.length){
              currentVertex = stack.pop();
              result.push(currentVertex);             
              this.adjacencyList[currentVertex].forEach(neighbor=>{
                  if(!visited[neighbor]){
                      visited[neighbor] = true;
                      stack.push(neighbor);
                  }
              })
          }
           return result;
     } 


      //BFS Traversal Iterative Way
     breadthFirstSearchIterative(vertex){
         let queue =[vertex];
          let result = [];
          let visited = {};
          let currentVertex;
          visited[vertex] = true;
          while(queue.length){
              currentVertex = queue.shift();
              result.push(currentVertex);             
              this.adjacencyList[currentVertex].forEach(neighbor=>{
                  if(!visited[neighbor]){
                      visited[neighbor] = true;
                      queue.push(neighbor);
                  }
              })
          }
           return result;
     } 
}

let g = new Graph();
g.addVertex('A');
g.addVertex('B');
g.addVertex('C');
g.addVertex('D');
g.addVertex('E');
g.addVertex('F');


g.addEdge('A','B')
g.addEdge('A','C')
g.addEdge('B','D')
g.addEdge('C','E')
g.addEdge('D','E')
g.addEdge('D','F')
g.addEdge('E','F')

        
//            A
//          /    \
//        B        C
//        |        |
//        D  ----- E
//         \     /
//            F