class Node {
    constructor(value){
       this.value = value;
       this.left = null;
       this.right = null;
    }
}


class BinarySearchTree {
    constructor(){
        this.root = null;
    }

    //Insert Operation: adding node into right places i.e. make tree sorted
    insert(value){
        let newNode = new Node(value);
        //check tree is empty or not
        if(!this.root) {
            this.root = newNode;
        }
        else{
            let current = this.root;
            while(true){
                if(current.value=== value) return undefined;
                if(value<current.value){
                    if(current.left === null) //check if left node is not present
                    {
                        current.left = newNode;
                        return this;
                    }
                    else{
                        current = current.left;
                    }
                }
                 if(value>current.value){
                    if(current.right === null)
                    {
                        current.right = newNode;
                        return this;
                    }
                    else{
                        current = current.right;
                    }
                }
            }
        }
//         else{
//             var temp = this.root;
//             let beforeNode;
//             while(temp){
//                  beforeNode =temp;
//                  if(value>temp.value){
//                     temp = temp.right;
//                  }
//                  else if(value<temp.value){
//                      temp = temp.left;
//                  }

//             }
//             if(value<beforeNode.value){
//                 beforeNode.left = newNode;
//             }
//             else{
//                 beforeNode.right = newNode;
//             }
//         }
//         return this.root;
    }


      //find Operation: find node from BST
    find(value){
        if(!this.root) return false;
        else{
            let current = this.root;
            let found = false;
            while(!found && current){
                if(!current) return undefined;
                if(current.value===value) return current;
                if(value<current.value){                
                        current =  current.left;
                }
                else if(value>current.value){
                        current =  current.right;
                 }
                else {
                    found =true;
                }
            }
            if(!found) return undefined;
            return current;
        }
    }
}

var tree = new BinarySearchTree();

// tree.root = new Node(10);
// tree.root.right = new Node(15);
// tree.root.left = new Node(5);
// tree.root.left.right  = new Node(9);

tree.insert(15)
tree.insert(12)
tree.insert(6)
tree.insert(50)
tree.insert(18)
tree.insert(25)
tree.insert(1)